/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

pub const FC_MAJOR: u32 = 2;
pub const FC_MINOR: u32 = 16;
pub const FC_REVISION: u32 = 0;
pub const FC_VERSION: u32 = 21600;
pub const FC_CACHE_VERSION_NUMBER: u32 = 9;
pub const FcFalse: u32 = 0;
pub const FcTrue: u32 = 1;
pub const FcDontCare: u32 = 2;
pub const FC_FAMILY: &[u8; 7] = b"family\0";
pub const FC_STYLE: &[u8; 6] = b"style\0";
pub const FC_SLANT: &[u8; 6] = b"slant\0";
pub const FC_WEIGHT: &[u8; 7] = b"weight\0";
pub const FC_SIZE: &[u8; 5] = b"size\0";
pub const FC_ASPECT: &[u8; 7] = b"aspect\0";
pub const FC_PIXEL_SIZE: &[u8; 10] = b"pixelsize\0";
pub const FC_SPACING: &[u8; 8] = b"spacing\0";
pub const FC_FOUNDRY: &[u8; 8] = b"foundry\0";
pub const FC_ANTIALIAS: &[u8; 10] = b"antialias\0";
pub const FC_HINTING: &[u8; 8] = b"hinting\0";
pub const FC_HINT_STYLE: &[u8; 10] = b"hintstyle\0";
pub const FC_VERTICAL_LAYOUT: &[u8; 15] = b"verticallayout\0";
pub const FC_AUTOHINT: &[u8; 9] = b"autohint\0";
pub const FC_GLOBAL_ADVANCE: &[u8; 14] = b"globaladvance\0";
pub const FC_WIDTH: &[u8; 6] = b"width\0";
pub const FC_FILE: &[u8; 5] = b"file\0";
pub const FC_INDEX: &[u8; 6] = b"index\0";
pub const FC_FT_FACE: &[u8; 7] = b"ftface\0";
pub const FC_RASTERIZER: &[u8; 11] = b"rasterizer\0";
pub const FC_OUTLINE: &[u8; 8] = b"outline\0";
pub const FC_SCALABLE: &[u8; 9] = b"scalable\0";
pub const FC_COLOR: &[u8; 6] = b"color\0";
pub const FC_VARIABLE: &[u8; 9] = b"variable\0";
pub const FC_SCALE: &[u8; 6] = b"scale\0";
pub const FC_SYMBOL: &[u8; 7] = b"symbol\0";
pub const FC_DPI: &[u8; 4] = b"dpi\0";
pub const FC_RGBA: &[u8; 5] = b"rgba\0";
pub const FC_MINSPACE: &[u8; 9] = b"minspace\0";
pub const FC_SOURCE: &[u8; 7] = b"source\0";
pub const FC_CHARSET: &[u8; 8] = b"charset\0";
pub const FC_LANG: &[u8; 5] = b"lang\0";
pub const FC_FONTVERSION: &[u8; 12] = b"fontversion\0";
pub const FC_FULLNAME: &[u8; 9] = b"fullname\0";
pub const FC_FAMILYLANG: &[u8; 11] = b"familylang\0";
pub const FC_STYLELANG: &[u8; 10] = b"stylelang\0";
pub const FC_FULLNAMELANG: &[u8; 13] = b"fullnamelang\0";
pub const FC_CAPABILITY: &[u8; 11] = b"capability\0";
pub const FC_FONTFORMAT: &[u8; 11] = b"fontformat\0";
pub const FC_EMBOLDEN: &[u8; 9] = b"embolden\0";
pub const FC_EMBEDDED_BITMAP: &[u8; 15] = b"embeddedbitmap\0";
pub const FC_DECORATIVE: &[u8; 11] = b"decorative\0";
pub const FC_LCD_FILTER: &[u8; 10] = b"lcdfilter\0";
pub const FC_FONT_FEATURES: &[u8; 13] = b"fontfeatures\0";
pub const FC_FONT_VARIATIONS: &[u8; 15] = b"fontvariations\0";
pub const FC_NAMELANG: &[u8; 9] = b"namelang\0";
pub const FC_PRGNAME: &[u8; 8] = b"prgname\0";
pub const FC_HASH: &[u8; 5] = b"hash\0";
pub const FC_POSTSCRIPT_NAME: &[u8; 15] = b"postscriptname\0";
pub const FC_FONT_HAS_HINT: &[u8; 12] = b"fonthashint\0";
pub const FC_ORDER: &[u8; 6] = b"order\0";
pub const FC_DESKTOP_NAME: &[u8; 8] = b"desktop\0";
pub const FC_NAMED_INSTANCE: &[u8; 14] = b"namedinstance\0";
pub const FC_FONT_WRAPPER: &[u8; 12] = b"fontwrapper\0";
pub const FC_CHARWIDTH: &[u8; 10] = b"charwidth\0";
pub const FC_CHAR_WIDTH: &[u8; 10] = b"charwidth\0";
pub const FC_CHAR_HEIGHT: &[u8; 11] = b"charheight\0";
pub const FC_MATRIX: &[u8; 7] = b"matrix\0";
pub const FC_WEIGHT_THIN: u32 = 0;
pub const FC_WEIGHT_EXTRALIGHT: u32 = 40;
pub const FC_WEIGHT_ULTRALIGHT: u32 = 40;
pub const FC_WEIGHT_LIGHT: u32 = 50;
pub const FC_WEIGHT_DEMILIGHT: u32 = 55;
pub const FC_WEIGHT_SEMILIGHT: u32 = 55;
pub const FC_WEIGHT_BOOK: u32 = 75;
pub const FC_WEIGHT_REGULAR: u32 = 80;
pub const FC_WEIGHT_NORMAL: u32 = 80;
pub const FC_WEIGHT_MEDIUM: u32 = 100;
pub const FC_WEIGHT_DEMIBOLD: u32 = 180;
pub const FC_WEIGHT_SEMIBOLD: u32 = 180;
pub const FC_WEIGHT_BOLD: u32 = 200;
pub const FC_WEIGHT_EXTRABOLD: u32 = 205;
pub const FC_WEIGHT_ULTRABOLD: u32 = 205;
pub const FC_WEIGHT_BLACK: u32 = 210;
pub const FC_WEIGHT_HEAVY: u32 = 210;
pub const FC_WEIGHT_EXTRABLACK: u32 = 215;
pub const FC_WEIGHT_ULTRABLACK: u32 = 215;
pub const FC_SLANT_ROMAN: u32 = 0;
pub const FC_SLANT_ITALIC: u32 = 100;
pub const FC_SLANT_OBLIQUE: u32 = 110;
pub const FC_WIDTH_ULTRACONDENSED: u32 = 50;
pub const FC_WIDTH_EXTRACONDENSED: u32 = 63;
pub const FC_WIDTH_CONDENSED: u32 = 75;
pub const FC_WIDTH_SEMICONDENSED: u32 = 87;
pub const FC_WIDTH_NORMAL: u32 = 100;
pub const FC_WIDTH_SEMIEXPANDED: u32 = 113;
pub const FC_WIDTH_EXPANDED: u32 = 125;
pub const FC_WIDTH_EXTRAEXPANDED: u32 = 150;
pub const FC_WIDTH_ULTRAEXPANDED: u32 = 200;
pub const FC_PROPORTIONAL: u32 = 0;
pub const FC_DUAL: u32 = 90;
pub const FC_MONO: u32 = 100;
pub const FC_CHARCELL: u32 = 110;
pub const FC_RGBA_UNKNOWN: u32 = 0;
pub const FC_RGBA_RGB: u32 = 1;
pub const FC_RGBA_BGR: u32 = 2;
pub const FC_RGBA_VRGB: u32 = 3;
pub const FC_RGBA_VBGR: u32 = 4;
pub const FC_RGBA_NONE: u32 = 5;
pub const FC_HINT_NONE: u32 = 0;
pub const FC_HINT_SLIGHT: u32 = 1;
pub const FC_HINT_MEDIUM: u32 = 2;
pub const FC_HINT_FULL: u32 = 3;
pub const FC_LCD_NONE: u32 = 0;
pub const FC_LCD_DEFAULT: u32 = 1;
pub const FC_LCD_LIGHT: u32 = 2;
pub const FC_LCD_LEGACY: u32 = 3;
pub const FC_CHARSET_MAP_SIZE: u32 = 8;
pub const FC_UTF8_MAX_LEN: u32 = 6;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __time_t = ::std::os::raw::c_long;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
pub type va_list = __builtin_va_list;
pub type FcChar8 = ::std::os::raw::c_uchar;
pub type FcChar16 = ::std::os::raw::c_ushort;
pub type FcChar32 = ::std::os::raw::c_uint;
pub type FcBool = ::std::os::raw::c_int;
pub const FcTypeUnknown: _FcType = -1;
pub const FcTypeVoid: _FcType = 0;
pub const FcTypeInteger: _FcType = 1;
pub const FcTypeDouble: _FcType = 2;
pub const FcTypeString: _FcType = 3;
pub const FcTypeBool: _FcType = 4;
pub const FcTypeMatrix: _FcType = 5;
pub const FcTypeCharSet: _FcType = 6;
pub const FcTypeFTFace: _FcType = 7;
pub const FcTypeLangSet: _FcType = 8;
pub const FcTypeRange: _FcType = 9;
pub type _FcType = ::std::os::raw::c_int;
pub use self::_FcType as FcType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcMatrix {
    pub xx: f64,
    pub xy: f64,
    pub yx: f64,
    pub yy: f64,
}
pub type FcMatrix = _FcMatrix;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcCharSet {
    _unused: [u8; 0],
}
pub type FcCharSet = _FcCharSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcObjectType {
    pub object: *mut ::std::os::raw::c_char,
    pub type_: FcType,
}
pub type FcObjectType = _FcObjectType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcConstant {
    pub name: *const FcChar8,
    pub object: *const ::std::os::raw::c_char,
    pub value: ::std::os::raw::c_int,
}
pub type FcConstant = _FcConstant;
pub const FcResultMatch: _FcResult = 0;
pub const FcResultNoMatch: _FcResult = 1;
pub const FcResultTypeMismatch: _FcResult = 2;
pub const FcResultNoId: _FcResult = 3;
pub const FcResultOutOfMemory: _FcResult = 4;
pub type _FcResult = ::std::os::raw::c_uint;
pub use self::_FcResult as FcResult;
pub const FcValueBindingWeak: _FcValueBinding = 0;
pub const FcValueBindingStrong: _FcValueBinding = 1;
pub const FcValueBindingSame: _FcValueBinding = 2;
pub const FcValueBindingEnd: _FcValueBinding = 2147483647;
pub type _FcValueBinding = ::std::os::raw::c_uint;
pub use self::_FcValueBinding as FcValueBinding;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcPattern {
    _unused: [u8; 0],
}
pub type FcPattern = _FcPattern;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcPatternIter {
    pub dummy1: *mut ::std::os::raw::c_void,
    pub dummy2: *mut ::std::os::raw::c_void,
}
pub type FcPatternIter = _FcPatternIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcLangSet {
    _unused: [u8; 0],
}
pub type FcLangSet = _FcLangSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcRange {
    _unused: [u8; 0],
}
pub type FcRange = _FcRange;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FcValue {
    pub type_: FcType,
    pub u: _FcValue__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _FcValue__bindgen_ty_1 {
    pub s: *const FcChar8,
    pub i: ::std::os::raw::c_int,
    pub b: FcBool,
    pub d: f64,
    pub m: *const FcMatrix,
    pub c: *const FcCharSet,
    pub f: *mut ::std::os::raw::c_void,
    pub l: *const FcLangSet,
    pub r: *const FcRange,
}
pub type FcValue = _FcValue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcFontSet {
    pub nfont: ::std::os::raw::c_int,
    pub sfont: ::std::os::raw::c_int,
    pub fonts: *mut *mut FcPattern,
}
pub type FcFontSet = _FcFontSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcObjectSet {
    pub nobject: ::std::os::raw::c_int,
    pub sobject: ::std::os::raw::c_int,
    pub objects: *mut *const ::std::os::raw::c_char,
}
pub type FcObjectSet = _FcObjectSet;
pub const FcMatchPattern: _FcMatchKind = 0;
pub const FcMatchFont: _FcMatchKind = 1;
pub const FcMatchScan: _FcMatchKind = 2;
pub const FcMatchKindEnd: _FcMatchKind = 3;
pub const FcMatchKindBegin: _FcMatchKind = 0;
pub type _FcMatchKind = ::std::os::raw::c_uint;
pub use self::_FcMatchKind as FcMatchKind;
pub const FcLangEqual: _FcLangResult = 0;
pub const FcLangDifferentCountry: _FcLangResult = 1;
pub const FcLangDifferentTerritory: _FcLangResult = 1;
pub const FcLangDifferentLang: _FcLangResult = 2;
pub type _FcLangResult = ::std::os::raw::c_uint;
pub use self::_FcLangResult as FcLangResult;
pub const FcSetSystem: _FcSetName = 0;
pub const FcSetApplication: _FcSetName = 1;
pub type _FcSetName = ::std::os::raw::c_uint;
pub use self::_FcSetName as FcSetName;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcConfigFileInfoIter {
    pub dummy1: *mut ::std::os::raw::c_void,
    pub dummy2: *mut ::std::os::raw::c_void,
    pub dummy3: *mut ::std::os::raw::c_void,
}
pub type FcConfigFileInfoIter = _FcConfigFileInfoIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcAtomic {
    _unused: [u8; 0],
}
pub type FcAtomic = _FcAtomic;
pub const FcEndianBig: FcEndian = 0;
pub const FcEndianLittle: FcEndian = 1;
pub type FcEndian = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcConfig {
    _unused: [u8; 0],
}
pub type FcConfig = _FcConfig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcGlobalCache {
    _unused: [u8; 0],
}
pub type FcFileCache = _FcGlobalCache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcBlanks {
    _unused: [u8; 0],
}
pub type FcBlanks = _FcBlanks;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcStrList {
    _unused: [u8; 0],
}
pub type FcStrList = _FcStrList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcStrSet {
    _unused: [u8; 0],
}
pub type FcStrSet = _FcStrSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FcCache {
    _unused: [u8; 0],
}
pub type FcCache = _FcCache;
pub type FcDestroyFunc =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
pub type FcFilterFontSetFunc = ::std::option::Option<
    unsafe extern "C" fn(font: *const FcPattern, user_data: *mut ::std::os::raw::c_void) -> FcBool,
>;
unsafe extern "C" {
    pub fn FcBlanksCreate() -> *mut FcBlanks;
}
unsafe extern "C" {
    pub fn FcBlanksDestroy(b: *mut FcBlanks);
}
unsafe extern "C" {
    pub fn FcBlanksAdd(b: *mut FcBlanks, ucs4: FcChar32) -> FcBool;
}
unsafe extern "C" {
    pub fn FcBlanksIsMember(b: *mut FcBlanks, ucs4: FcChar32) -> FcBool;
}
unsafe extern "C" {
    pub fn FcCacheDir(c: *const FcCache) -> *const FcChar8;
}
unsafe extern "C" {
    pub fn FcCacheCopySet(c: *const FcCache) -> *mut FcFontSet;
}
unsafe extern "C" {
    pub fn FcCacheSubdir(c: *const FcCache, i: ::std::os::raw::c_int) -> *const FcChar8;
}
unsafe extern "C" {
    pub fn FcCacheNumSubdir(c: *const FcCache) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcCacheNumFont(c: *const FcCache) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcDirCacheUnlink(dir: *const FcChar8, config: *mut FcConfig) -> FcBool;
}
unsafe extern "C" {
    pub fn FcDirCacheValid(cache_file: *const FcChar8) -> FcBool;
}
unsafe extern "C" {
    pub fn FcDirCacheClean(cache_dir: *const FcChar8, verbose: FcBool) -> FcBool;
}
unsafe extern "C" {
    pub fn FcCacheCreateTagFile(config: *mut FcConfig);
}
unsafe extern "C" {
    pub fn FcDirCacheCreateUUID(dir: *mut FcChar8, force: FcBool, config: *mut FcConfig) -> FcBool;
}
unsafe extern "C" {
    pub fn FcDirCacheDeleteUUID(dir: *const FcChar8, config: *mut FcConfig) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigHome() -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcConfigEnableHome(enable: FcBool) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigGetFilename(config: *mut FcConfig, url: *const FcChar8) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcConfigFilename(url: *const FcChar8) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcConfigCreate() -> *mut FcConfig;
}
unsafe extern "C" {
    pub fn FcConfigReference(config: *mut FcConfig) -> *mut FcConfig;
}
unsafe extern "C" {
    pub fn FcConfigDestroy(config: *mut FcConfig);
}
unsafe extern "C" {
    pub fn FcConfigSetCurrent(config: *mut FcConfig) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigGetCurrent() -> *mut FcConfig;
}
unsafe extern "C" {
    pub fn FcConfigUptoDate(config: *mut FcConfig) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigBuildFonts(config: *mut FcConfig) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigGetFontDirs(config: *mut FcConfig) -> *mut FcStrList;
}
unsafe extern "C" {
    pub fn FcConfigGetConfigDirs(config: *mut FcConfig) -> *mut FcStrList;
}
unsafe extern "C" {
    pub fn FcConfigGetConfigFiles(config: *mut FcConfig) -> *mut FcStrList;
}
unsafe extern "C" {
    pub fn FcConfigGetCache(config: *mut FcConfig) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcConfigGetBlanks(config: *mut FcConfig) -> *mut FcBlanks;
}
unsafe extern "C" {
    pub fn FcConfigGetCacheDirs(config: *mut FcConfig) -> *mut FcStrList;
}
unsafe extern "C" {
    pub fn FcConfigGetRescanInterval(config: *mut FcConfig) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcConfigSetRescanInterval(
        config: *mut FcConfig,
        rescanInterval: ::std::os::raw::c_int,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigGetFonts(config: *mut FcConfig, set: FcSetName) -> *mut FcFontSet;
}
unsafe extern "C" {
    pub fn FcConfigAcceptFont(config: *mut FcConfig, font: *const FcPattern) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigAcceptFilter(config: *mut FcConfig, font: *const FcPattern) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigAppFontAddFile(config: *mut FcConfig, file: *const FcChar8) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigAppFontAddDir(config: *mut FcConfig, dir: *const FcChar8) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigAppFontClear(config: *mut FcConfig);
}
unsafe extern "C" {
    pub fn FcConfigSubstituteWithPat(
        config: *mut FcConfig,
        p: *mut FcPattern,
        p_pat: *mut FcPattern,
        kind: FcMatchKind,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigSubstitute(
        config: *mut FcConfig,
        p: *mut FcPattern,
        kind: FcMatchKind,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigGetSysRoot(config: *const FcConfig) -> *const FcChar8;
}
unsafe extern "C" {
    pub fn FcConfigSetSysRoot(config: *mut FcConfig, sysroot: *const FcChar8);
}
unsafe extern "C" {
    pub fn FcConfigSetFontSetFilter(
        config: *mut FcConfig,
        filter_func: FcFilterFontSetFunc,
        destroy_data_func: FcDestroyFunc,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut FcConfig;
}
unsafe extern "C" {
    pub fn FcConfigFileInfoIterInit(config: *mut FcConfig, iter: *mut FcConfigFileInfoIter);
}
unsafe extern "C" {
    pub fn FcConfigFileInfoIterNext(
        config: *mut FcConfig,
        iter: *mut FcConfigFileInfoIter,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigFileInfoIterGet(
        config: *mut FcConfig,
        iter: *mut FcConfigFileInfoIter,
        name: *mut *mut FcChar8,
        description: *mut *mut FcChar8,
        enabled: *mut FcBool,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcCharSetCreate() -> *mut FcCharSet;
}
unsafe extern "C" {
    pub fn FcCharSetNew() -> *mut FcCharSet;
}
unsafe extern "C" {
    pub fn FcCharSetDestroy(fcs: *mut FcCharSet);
}
unsafe extern "C" {
    pub fn FcCharSetAddChar(fcs: *mut FcCharSet, ucs4: FcChar32) -> FcBool;
}
unsafe extern "C" {
    pub fn FcCharSetDelChar(fcs: *mut FcCharSet, ucs4: FcChar32) -> FcBool;
}
unsafe extern "C" {
    pub fn FcCharSetCopy(src: *mut FcCharSet) -> *mut FcCharSet;
}
unsafe extern "C" {
    pub fn FcCharSetEqual(a: *const FcCharSet, b: *const FcCharSet) -> FcBool;
}
unsafe extern "C" {
    pub fn FcCharSetIntersect(a: *const FcCharSet, b: *const FcCharSet) -> *mut FcCharSet;
}
unsafe extern "C" {
    pub fn FcCharSetUnion(a: *const FcCharSet, b: *const FcCharSet) -> *mut FcCharSet;
}
unsafe extern "C" {
    pub fn FcCharSetSubtract(a: *const FcCharSet, b: *const FcCharSet) -> *mut FcCharSet;
}
unsafe extern "C" {
    pub fn FcCharSetMerge(a: *mut FcCharSet, b: *const FcCharSet, changed: *mut FcBool) -> FcBool;
}
unsafe extern "C" {
    pub fn FcCharSetHasChar(fcs: *const FcCharSet, ucs4: FcChar32) -> FcBool;
}
unsafe extern "C" {
    pub fn FcCharSetCount(a: *const FcCharSet) -> FcChar32;
}
unsafe extern "C" {
    pub fn FcCharSetIntersectCount(a: *const FcCharSet, b: *const FcCharSet) -> FcChar32;
}
unsafe extern "C" {
    pub fn FcCharSetSubtractCount(a: *const FcCharSet, b: *const FcCharSet) -> FcChar32;
}
unsafe extern "C" {
    pub fn FcCharSetIsSubset(a: *const FcCharSet, b: *const FcCharSet) -> FcBool;
}
unsafe extern "C" {
    pub fn FcCharSetFirstPage(
        a: *const FcCharSet,
        map: *mut FcChar32,
        next: *mut FcChar32,
    ) -> FcChar32;
}
unsafe extern "C" {
    pub fn FcCharSetNextPage(
        a: *const FcCharSet,
        map: *mut FcChar32,
        next: *mut FcChar32,
    ) -> FcChar32;
}
unsafe extern "C" {
    pub fn FcCharSetCoverage(
        a: *const FcCharSet,
        page: FcChar32,
        result: *mut FcChar32,
    ) -> FcChar32;
}
unsafe extern "C" {
    pub fn FcValuePrint(v: FcValue);
}
unsafe extern "C" {
    pub fn FcPatternPrint(p: *const FcPattern);
}
unsafe extern "C" {
    pub fn FcFontSetPrint(s: *const FcFontSet);
}
unsafe extern "C" {
    pub fn FcGetDefaultLangs() -> *mut FcStrSet;
}
unsafe extern "C" {
    pub fn FcDefaultSubstitute(pattern: *mut FcPattern);
}
unsafe extern "C" {
    pub fn FcFileIsDir(file: *const FcChar8) -> FcBool;
}
unsafe extern "C" {
    pub fn FcFileScan(
        set: *mut FcFontSet,
        dirs: *mut FcStrSet,
        cache: *mut FcFileCache,
        blanks: *mut FcBlanks,
        file: *const FcChar8,
        force: FcBool,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcDirScan(
        set: *mut FcFontSet,
        dirs: *mut FcStrSet,
        cache: *mut FcFileCache,
        blanks: *mut FcBlanks,
        dir: *const FcChar8,
        force: FcBool,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcDirSave(set: *mut FcFontSet, dirs: *mut FcStrSet, dir: *const FcChar8) -> FcBool;
}
unsafe extern "C" {
    pub fn FcDirCacheLoad(
        dir: *const FcChar8,
        config: *mut FcConfig,
        cache_file: *mut *mut FcChar8,
    ) -> *mut FcCache;
}
unsafe extern "C" {
    pub fn FcDirCacheRescan(dir: *const FcChar8, config: *mut FcConfig) -> *mut FcCache;
}
unsafe extern "C" {
    pub fn FcDirCacheRead(
        dir: *const FcChar8,
        force: FcBool,
        config: *mut FcConfig,
    ) -> *mut FcCache;
}
unsafe extern "C" {
    pub fn FcDirCacheLoadFile(cache_file: *const FcChar8, file_stat: *mut stat) -> *mut FcCache;
}
unsafe extern "C" {
    pub fn FcDirCacheUnload(cache: *mut FcCache);
}
unsafe extern "C" {
    pub fn FcFreeTypeQuery(
        file: *const FcChar8,
        id: ::std::os::raw::c_uint,
        blanks: *mut FcBlanks,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut FcPattern;
}
unsafe extern "C" {
    pub fn FcFreeTypeQueryAll(
        file: *const FcChar8,
        id: ::std::os::raw::c_uint,
        blanks: *mut FcBlanks,
        count: *mut ::std::os::raw::c_int,
        set: *mut FcFontSet,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn FcFontSetCreate() -> *mut FcFontSet;
}
unsafe extern "C" {
    pub fn FcFontSetDestroy(s: *mut FcFontSet);
}
unsafe extern "C" {
    pub fn FcFontSetAdd(s: *mut FcFontSet, font: *mut FcPattern) -> FcBool;
}
unsafe extern "C" {
    pub fn FcInitLoadConfig() -> *mut FcConfig;
}
unsafe extern "C" {
    pub fn FcInitLoadConfigAndFonts() -> *mut FcConfig;
}
unsafe extern "C" {
    pub fn FcInit() -> FcBool;
}
unsafe extern "C" {
    pub fn FcFini();
}
unsafe extern "C" {
    pub fn FcGetVersion() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcInitReinitialize() -> FcBool;
}
unsafe extern "C" {
    pub fn FcInitBringUptoDate() -> FcBool;
}
unsafe extern "C" {
    pub fn FcGetLangs() -> *mut FcStrSet;
}
unsafe extern "C" {
    pub fn FcLangNormalize(lang: *const FcChar8) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcLangGetCharSet(lang: *const FcChar8) -> *const FcCharSet;
}
unsafe extern "C" {
    pub fn FcLangSetCreate() -> *mut FcLangSet;
}
unsafe extern "C" {
    pub fn FcLangSetDestroy(ls: *mut FcLangSet);
}
unsafe extern "C" {
    pub fn FcLangSetCopy(ls: *const FcLangSet) -> *mut FcLangSet;
}
unsafe extern "C" {
    pub fn FcLangSetAdd(ls: *mut FcLangSet, lang: *const FcChar8) -> FcBool;
}
unsafe extern "C" {
    pub fn FcLangSetDel(ls: *mut FcLangSet, lang: *const FcChar8) -> FcBool;
}
unsafe extern "C" {
    pub fn FcLangSetHasLang(ls: *const FcLangSet, lang: *const FcChar8) -> FcLangResult;
}
unsafe extern "C" {
    pub fn FcLangSetCompare(lsa: *const FcLangSet, lsb: *const FcLangSet) -> FcLangResult;
}
unsafe extern "C" {
    pub fn FcLangSetContains(lsa: *const FcLangSet, lsb: *const FcLangSet) -> FcBool;
}
unsafe extern "C" {
    pub fn FcLangSetEqual(lsa: *const FcLangSet, lsb: *const FcLangSet) -> FcBool;
}
unsafe extern "C" {
    pub fn FcLangSetHash(ls: *const FcLangSet) -> FcChar32;
}
unsafe extern "C" {
    pub fn FcLangSetGetLangs(ls: *const FcLangSet) -> *mut FcStrSet;
}
unsafe extern "C" {
    pub fn FcLangSetUnion(a: *const FcLangSet, b: *const FcLangSet) -> *mut FcLangSet;
}
unsafe extern "C" {
    pub fn FcLangSetSubtract(a: *const FcLangSet, b: *const FcLangSet) -> *mut FcLangSet;
}
unsafe extern "C" {
    pub fn FcObjectSetCreate() -> *mut FcObjectSet;
}
unsafe extern "C" {
    pub fn FcObjectSetAdd(os: *mut FcObjectSet, object: *const ::std::os::raw::c_char) -> FcBool;
}
unsafe extern "C" {
    pub fn FcObjectSetDestroy(os: *mut FcObjectSet);
}
unsafe extern "C" {
    pub fn FcObjectSetVaBuild(
        first: *const ::std::os::raw::c_char,
        va: *mut __va_list_tag,
    ) -> *mut FcObjectSet;
}
unsafe extern "C" {
    pub fn FcObjectSetBuild(first: *const ::std::os::raw::c_char, ...) -> *mut FcObjectSet;
}
unsafe extern "C" {
    pub fn FcFontSetList(
        config: *mut FcConfig,
        sets: *mut *mut FcFontSet,
        nsets: ::std::os::raw::c_int,
        p: *mut FcPattern,
        os: *mut FcObjectSet,
    ) -> *mut FcFontSet;
}
unsafe extern "C" {
    pub fn FcFontList(
        config: *mut FcConfig,
        p: *mut FcPattern,
        os: *mut FcObjectSet,
    ) -> *mut FcFontSet;
}
unsafe extern "C" {
    pub fn FcAtomicCreate(file: *const FcChar8) -> *mut FcAtomic;
}
unsafe extern "C" {
    pub fn FcAtomicLock(atomic: *mut FcAtomic) -> FcBool;
}
unsafe extern "C" {
    pub fn FcAtomicNewFile(atomic: *mut FcAtomic) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcAtomicOrigFile(atomic: *mut FcAtomic) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcAtomicReplaceOrig(atomic: *mut FcAtomic) -> FcBool;
}
unsafe extern "C" {
    pub fn FcAtomicDeleteNew(atomic: *mut FcAtomic);
}
unsafe extern "C" {
    pub fn FcAtomicUnlock(atomic: *mut FcAtomic);
}
unsafe extern "C" {
    pub fn FcAtomicDestroy(atomic: *mut FcAtomic);
}
unsafe extern "C" {
    pub fn FcFontSetMatch(
        config: *mut FcConfig,
        sets: *mut *mut FcFontSet,
        nsets: ::std::os::raw::c_int,
        p: *mut FcPattern,
        result: *mut FcResult,
    ) -> *mut FcPattern;
}
unsafe extern "C" {
    pub fn FcFontMatch(
        config: *mut FcConfig,
        p: *mut FcPattern,
        result: *mut FcResult,
    ) -> *mut FcPattern;
}
unsafe extern "C" {
    pub fn FcFontRenderPrepare(
        config: *mut FcConfig,
        pat: *mut FcPattern,
        font: *mut FcPattern,
    ) -> *mut FcPattern;
}
unsafe extern "C" {
    pub fn FcFontSetSort(
        config: *mut FcConfig,
        sets: *mut *mut FcFontSet,
        nsets: ::std::os::raw::c_int,
        p: *mut FcPattern,
        trim: FcBool,
        csp: *mut *mut FcCharSet,
        result: *mut FcResult,
    ) -> *mut FcFontSet;
}
unsafe extern "C" {
    pub fn FcFontSort(
        config: *mut FcConfig,
        p: *mut FcPattern,
        trim: FcBool,
        csp: *mut *mut FcCharSet,
        result: *mut FcResult,
    ) -> *mut FcFontSet;
}
unsafe extern "C" {
    pub fn FcFontSetSortDestroy(fs: *mut FcFontSet);
}
unsafe extern "C" {
    pub fn FcMatrixCopy(mat: *const FcMatrix) -> *mut FcMatrix;
}
unsafe extern "C" {
    pub fn FcMatrixEqual(mat1: *const FcMatrix, mat2: *const FcMatrix) -> FcBool;
}
unsafe extern "C" {
    pub fn FcMatrixMultiply(result: *mut FcMatrix, a: *const FcMatrix, b: *const FcMatrix);
}
unsafe extern "C" {
    pub fn FcMatrixRotate(m: *mut FcMatrix, c: f64, s: f64);
}
unsafe extern "C" {
    pub fn FcMatrixScale(m: *mut FcMatrix, sx: f64, sy: f64);
}
unsafe extern "C" {
    pub fn FcMatrixShear(m: *mut FcMatrix, sh: f64, sv: f64);
}
unsafe extern "C" {
    pub fn FcNameRegisterObjectTypes(
        types: *const FcObjectType,
        ntype: ::std::os::raw::c_int,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcNameUnregisterObjectTypes(
        types: *const FcObjectType,
        ntype: ::std::os::raw::c_int,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcNameGetObjectType(object: *const ::std::os::raw::c_char) -> *const FcObjectType;
}
unsafe extern "C" {
    pub fn FcNameRegisterConstants(
        consts: *const FcConstant,
        nconsts: ::std::os::raw::c_int,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcNameUnregisterConstants(
        consts: *const FcConstant,
        nconsts: ::std::os::raw::c_int,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcNameGetConstant(string: *const FcChar8) -> *const FcConstant;
}
unsafe extern "C" {
    pub fn FcNameGetConstantFor(
        string: *const FcChar8,
        object: *const ::std::os::raw::c_char,
    ) -> *const FcConstant;
}
unsafe extern "C" {
    pub fn FcNameConstant(string: *const FcChar8, result: *mut ::std::os::raw::c_int) -> FcBool;
}
unsafe extern "C" {
    pub fn FcNameParse(name: *const FcChar8) -> *mut FcPattern;
}
unsafe extern "C" {
    pub fn FcNameUnparse(pat: *mut FcPattern) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcPatternCreate() -> *mut FcPattern;
}
unsafe extern "C" {
    pub fn FcPatternDuplicate(p: *const FcPattern) -> *mut FcPattern;
}
unsafe extern "C" {
    pub fn FcPatternReference(p: *mut FcPattern);
}
unsafe extern "C" {
    pub fn FcPatternFilter(p: *mut FcPattern, os: *const FcObjectSet) -> *mut FcPattern;
}
unsafe extern "C" {
    pub fn FcValueDestroy(v: FcValue);
}
unsafe extern "C" {
    pub fn FcValueEqual(va: FcValue, vb: FcValue) -> FcBool;
}
unsafe extern "C" {
    pub fn FcValueSave(v: FcValue) -> FcValue;
}
unsafe extern "C" {
    pub fn FcPatternDestroy(p: *mut FcPattern);
}
unsafe extern "C" {
    pub fn FcPatternObjectCount(pat: *const FcPattern) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcPatternEqual(pa: *const FcPattern, pb: *const FcPattern) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternEqualSubset(
        pa: *const FcPattern,
        pb: *const FcPattern,
        os: *const FcObjectSet,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternHash(p: *const FcPattern) -> FcChar32;
}
unsafe extern "C" {
    pub fn FcPatternAdd(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        value: FcValue,
        append: FcBool,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternAddWeak(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        value: FcValue,
        append: FcBool,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternGet(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        v: *mut FcValue,
    ) -> FcResult;
}
unsafe extern "C" {
    pub fn FcPatternGetWithBinding(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        v: *mut FcValue,
        b: *mut FcValueBinding,
    ) -> FcResult;
}
unsafe extern "C" {
    pub fn FcPatternDel(p: *mut FcPattern, object: *const ::std::os::raw::c_char) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternRemove(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternAddInteger(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        i: ::std::os::raw::c_int,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternAddDouble(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        d: f64,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternAddString(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        s: *const FcChar8,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternAddMatrix(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        s: *const FcMatrix,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternAddCharSet(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        c: *const FcCharSet,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternAddBool(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        b: FcBool,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternAddLangSet(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        ls: *const FcLangSet,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternAddRange(
        p: *mut FcPattern,
        object: *const ::std::os::raw::c_char,
        r: *const FcRange,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternGetInteger(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        i: *mut ::std::os::raw::c_int,
    ) -> FcResult;
}
unsafe extern "C" {
    pub fn FcPatternGetDouble(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        d: *mut f64,
    ) -> FcResult;
}
unsafe extern "C" {
    pub fn FcPatternGetString(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        s: *mut *mut FcChar8,
    ) -> FcResult;
}
unsafe extern "C" {
    pub fn FcPatternGetMatrix(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        s: *mut *mut FcMatrix,
    ) -> FcResult;
}
unsafe extern "C" {
    pub fn FcPatternGetCharSet(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        c: *mut *mut FcCharSet,
    ) -> FcResult;
}
unsafe extern "C" {
    pub fn FcPatternGetBool(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        b: *mut FcBool,
    ) -> FcResult;
}
unsafe extern "C" {
    pub fn FcPatternGetLangSet(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        ls: *mut *mut FcLangSet,
    ) -> FcResult;
}
unsafe extern "C" {
    pub fn FcPatternGetRange(
        p: *const FcPattern,
        object: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        r: *mut *mut FcRange,
    ) -> FcResult;
}
unsafe extern "C" {
    pub fn FcPatternVaBuild(p: *mut FcPattern, va: *mut __va_list_tag) -> *mut FcPattern;
}
unsafe extern "C" {
    pub fn FcPatternBuild(p: *mut FcPattern, ...) -> *mut FcPattern;
}
unsafe extern "C" {
    pub fn FcPatternFormat(pat: *mut FcPattern, format: *const FcChar8) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcRangeCreateDouble(begin: f64, end: f64) -> *mut FcRange;
}
unsafe extern "C" {
    pub fn FcRangeCreateInteger(begin: FcChar32, end: FcChar32) -> *mut FcRange;
}
unsafe extern "C" {
    pub fn FcRangeDestroy(range: *mut FcRange);
}
unsafe extern "C" {
    pub fn FcRangeCopy(r: *const FcRange) -> *mut FcRange;
}
unsafe extern "C" {
    pub fn FcRangeGetDouble(range: *const FcRange, begin: *mut f64, end: *mut f64) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternIterStart(pat: *const FcPattern, iter: *mut FcPatternIter);
}
unsafe extern "C" {
    pub fn FcPatternIterNext(pat: *const FcPattern, iter: *mut FcPatternIter) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternIterEqual(
        p1: *const FcPattern,
        i1: *mut FcPatternIter,
        p2: *const FcPattern,
        i2: *mut FcPatternIter,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternFindIter(
        pat: *const FcPattern,
        iter: *mut FcPatternIter,
        object: *const ::std::os::raw::c_char,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternIterIsValid(pat: *const FcPattern, iter: *mut FcPatternIter) -> FcBool;
}
unsafe extern "C" {
    pub fn FcPatternIterGetObject(
        pat: *const FcPattern,
        iter: *mut FcPatternIter,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn FcPatternIterValueCount(
        pat: *const FcPattern,
        iter: *mut FcPatternIter,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcPatternIterGetValue(
        pat: *const FcPattern,
        iter: *mut FcPatternIter,
        id: ::std::os::raw::c_int,
        v: *mut FcValue,
        b: *mut FcValueBinding,
    ) -> FcResult;
}
unsafe extern "C" {
    pub fn FcWeightFromOpenType(ot_weight: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcWeightFromOpenTypeDouble(ot_weight: f64) -> f64;
}
unsafe extern "C" {
    pub fn FcWeightToOpenType(fc_weight: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcWeightToOpenTypeDouble(fc_weight: f64) -> f64;
}
unsafe extern "C" {
    pub fn FcStrCopy(s: *const FcChar8) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcStrCopyFilename(s: *const FcChar8) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcStrPlus(s1: *const FcChar8, s2: *const FcChar8) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcStrFree(s: *mut FcChar8);
}
unsafe extern "C" {
    pub fn FcStrDowncase(s: *const FcChar8) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcStrCmpIgnoreCase(s1: *const FcChar8, s2: *const FcChar8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcStrCmp(s1: *const FcChar8, s2: *const FcChar8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcStrStrIgnoreCase(s1: *const FcChar8, s2: *const FcChar8) -> *const FcChar8;
}
unsafe extern "C" {
    pub fn FcStrStr(s1: *const FcChar8, s2: *const FcChar8) -> *const FcChar8;
}
unsafe extern "C" {
    pub fn FcUtf8ToUcs4(
        src_orig: *const FcChar8,
        dst: *mut FcChar32,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcUtf8Len(
        string: *const FcChar8,
        len: ::std::os::raw::c_int,
        nchar: *mut ::std::os::raw::c_int,
        wchar: *mut ::std::os::raw::c_int,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcUcs4ToUtf8(ucs4: FcChar32, dest: *mut FcChar8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcUtf16ToUcs4(
        src_orig: *const FcChar8,
        endian: FcEndian,
        dst: *mut FcChar32,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FcUtf16Len(
        string: *const FcChar8,
        endian: FcEndian,
        len: ::std::os::raw::c_int,
        nchar: *mut ::std::os::raw::c_int,
        wchar: *mut ::std::os::raw::c_int,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcStrBuildFilename(path: *const FcChar8, ...) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcStrDirname(file: *const FcChar8) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcStrBasename(file: *const FcChar8) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcStrSetCreate() -> *mut FcStrSet;
}
unsafe extern "C" {
    pub fn FcStrSetMember(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
}
unsafe extern "C" {
    pub fn FcStrSetEqual(sa: *mut FcStrSet, sb: *mut FcStrSet) -> FcBool;
}
unsafe extern "C" {
    pub fn FcStrSetAdd(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
}
unsafe extern "C" {
    pub fn FcStrSetAddFilename(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
}
unsafe extern "C" {
    pub fn FcStrSetDel(set: *mut FcStrSet, s: *const FcChar8) -> FcBool;
}
unsafe extern "C" {
    pub fn FcStrSetDestroy(set: *mut FcStrSet);
}
unsafe extern "C" {
    pub fn FcStrListCreate(set: *mut FcStrSet) -> *mut FcStrList;
}
unsafe extern "C" {
    pub fn FcStrListFirst(list: *mut FcStrList);
}
unsafe extern "C" {
    pub fn FcStrListNext(list: *mut FcStrList) -> *mut FcChar8;
}
unsafe extern "C" {
    pub fn FcStrListDone(list: *mut FcStrList);
}
unsafe extern "C" {
    pub fn FcConfigParseAndLoad(
        config: *mut FcConfig,
        file: *const FcChar8,
        complain: FcBool,
    ) -> FcBool;
}
unsafe extern "C" {
    pub fn FcConfigParseAndLoadFromMemory(
        config: *mut FcConfig,
        buffer: *const FcChar8,
        complain: FcBool,
    ) -> FcBool;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
